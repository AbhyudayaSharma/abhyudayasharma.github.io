{"version":3,"sources":["serviceWorker.js","BigButton.tsx","Footer.jsx","Home.tsx","Header.tsx","blog/Blogs.ts","Blog.jsx","md-renderers/Heading.tsx","md-renderers/Code.tsx","BlogListEntry.tsx","BlogList.tsx","AboutMe.tsx","App.tsx","index.tsx","blog lazy /^/.//.*/.md$/ groupOptions: {} namespace object"],"names":["Boolean","window","location","hostname","match","BigButton","linkProps","draggable","onDragStart","e","preventDefault","className","this","props","url","startsWith","to","text","href","Component","gitInfo","Footer","packageJson","repository","commit","hash","shortHash","links","Home","buttons","map","link","index","key","author","name","Header","activeClassName","exact","blogs","date","Date","title","path","description","tags","Blogs","promises","blog","Promise","all","urls","default","markdownRenderers","heading","children","code","console","log","value","Blog","state","undefined","doRedirect","toLocaleDateString","weekday","year","month","day","source","renderers","getMarkdown","prevProps","params","updateBlog","getBlogs","fetch","setState","withRouter","dateOptions","BlogListEntry","role","aria-label","tag","BlogList","then","aboutMe","style","width","textAlign","display","flexDirection","justifyContent","height","fontSize","color","App","AboutMe","fontWeight","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","webpackAsyncContext","req","__webpack_require__","o","resolve","Error","ids","id","t","keys","Object","module","exports"],"mappings":"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","file":"static/js/main.b067c7f1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component, SyntheticEvent } from 'react';\nimport './scss/BigButton.scss';\nimport { Link } from 'react-router-dom';\n\ninterface Props {\n  url: string;\n  text: string;\n}\n\nclass BigButton extends Component<Props, {}> {\n  render(): JSX.Element {\n    const linkProps = {\n      draggable: false,\n      onDragStart: (e: SyntheticEvent): void => e.preventDefault(),\n      className: 'BigButton',\n    };\n\n    let link;\n    if (this.props.url.startsWith('/')) {\n      link = (<Link {...linkProps} to={this.props.url}>{this.props.text}</Link>);\n    } else {\n      link = (<a {...linkProps} href={this.props.url}>{this.props.text}</a>);\n    }\n\n    return link;\n  }\n}\n\nexport default BigButton;\n","import React, { Component } from 'react';\nimport GitInfo from 'react-git-info/macro';\nimport packageJson from '../package.json';\n\nimport './scss/Footer.scss';\n\nconst gitInfo = GitInfo();\n\nclass Footer extends Component {\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n  render() {\n    return (\n      <div className='Footer'>\n        <p>\n          This page was built and deployed from the commit&nbsp;\n          <a href={`${packageJson.repository.url}/commit/${gitInfo.commit.hash}`} className='Footer-link'>\n            <code>{gitInfo.commit.shortHash}</code>\n          </a>\n          <br/>\n          Fork this repository on&nbsp;\n          <a href={packageJson.repository.url} className='Footer-link'>\n            GitHub\n          </a>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport BigButton from './BigButton';\nimport Footer from './Footer';\nimport packageJson from '../package.json';\n\nimport './scss/common.scss';\nimport './scss/Home.scss';\n\nconst links = [\n  {\n    text: 'Blog',\n    url: '/blog',\n  },\n  {\n    text: 'GitHub',\n    url: 'https://github.com/AbhyudayaSharma',\n  },\n  {\n    text: 'LinkedIn',\n    url: 'https://www.linkedin.com/in/abhyudaya-sharma/',\n  },\n];\n\nclass Home extends Component {\n  render(): JSX.Element {\n    const buttons = links.map((link, index) => <BigButton key={index} {...link}/>);\n\n    return (\n      <div className=\"Home\">\n        <div className=\"Home-header\">\n          <h1 className='Home-h1'>\n            {packageJson.author.name}\n          </h1>\n        </div>\n        <div className=\"Home-body\">\n          {buttons}\n        </div>\n        <div className='Home-footer unselectable'>\n          <Footer/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport packageJson from '../package.json';\n\nimport './scss/Header.scss';\n\nexport default class Header extends Component<{}, {}> {\n  render(): JSX.Element {\n    return (\n      <div className='Header'>\n        <div className='Header-title'>\n          <h1 className='Header-h1'>\n            <NavLink to='/' activeClassName='Header-link-hover'>\n              {packageJson.author.name}\n            </NavLink>\n          </h1>\n        </div>\n        <div className='Header-links'>\n          <h2 className='Header-h2'>\n            <NavLink exact to='/' activeClassName='Header-link-selected'>\n              Home\n            </NavLink>\n          </h2>\n          <h2 className='Header-h2'>\n            <NavLink exact to='/blog' activeClassName='Header-link-selected'>\n              Blog\n            </NavLink>\n          </h2>\n          <h2 className='Header-h2'>\n            <NavLink exact to='/about' activeClassName='Header-link-selected'>\n              About Me\n            </NavLink>\n          </h2>\n        </div>\n      </div>);\n  }\n}\n","export interface BlogMetadata {\n  readonly title: string;\n  readonly tags: string[];\n  readonly date: Date;\n  readonly url?: string;\n  readonly path: string;\n  readonly description: string;\n}\n\n// NOTE: months in the date constructor start from 0\nconst blogs: BlogMetadata[] = [\n  {\n    date: new Date(2020, 1, 7, 12, 45, 0, 0),\n    title: 'Hello World',\n    path: '2020/hello-world',\n    description: 'This my first blog. Hello world!👋',\n    tags: [\n      'hello',\n      'world',\n      'hello-world',\n    ],\n  },\n];\n\nexport default class Blogs {\n  static async getBlogs(): Promise<BlogMetadata[]> {\n    const promises = blogs.map(blog => import(`./${blog.path}.md`));\n    const urls = await Promise.all(promises);\n    return blogs.map((blog, index) => {\n      return {\n        ...blog,\n        url: urls[index].default,\n      };\n    });\n  }\n}\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\n// This is a JavaScript file, not TypeScript\nimport React, { Component } from 'react';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Blogs from './blog/Blogs';\n\nimport './scss/Blog.scss';\nimport { Redirect, withRouter } from 'react-router-dom';\nimport ReactMarkdown from 'react-markdown';\nimport Heading from './md-renderers/Heading';\nimport Code from './md-renderers/Code';\n\nconst markdownRenderers = {\n  heading: Heading,\n  code: Code,\n};\n\nclass Blog extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      blog: undefined,\n      doRedirect: false,\n    };\n  }\n\n  getMarkdown() {\n    if (!this.state.blog) {\n      if (this.state.doRedirect) {\n        return <Redirect to='/404'/>;\n      } else {\n        return null;\n      }\n    } else {\n      return (\n        <div>\n          <div>\n            <p className='Blog-date'>\n              {this.state.blog.date.toLocaleDateString('en-US', {\n                weekday: 'long',\n                year: 'numeric',\n                month: 'long',\n                day: 'numeric',\n              })}\n            </p>\n          </div>\n          <div>\n            <ReactMarkdown source={this.state.blog.text} renderers={markdownRenderers}/>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div className='Blog'>\n        <Header/>\n        <div className='Blog-text'>\n          <div> {/* This div is needed to center the content */}\n            {this.getMarkdown()}\n          </div>\n        </div>\n        <Footer/>\n      </div>\n    );\n  }\n\n  componentDidUpdate(prevProps) {\n    // the type definitions for react-router-dom are really bad in this case\n    // so we cannot use TypeScript. I don't want to add another dependency\n    // to prop-types for just one file. Better to disable these warnings as\n    // only withRouter(Blog) is exported\n\n    // do not render the blog twice on the first load\n    // eslint-disable-next-line react/prop-types\n    if (prevProps.match.params.path !== this.props.match.params.path) {\n      this.updateBlog();\n    }\n  }\n\n  componentDidMount() {\n    this.updateBlog();\n  }\n\n  /**\n   * Updates the rendered blog. Use when the component state or props change.\n   * @return {Promise<void>}\n   */\n  async updateBlog() {\n    const blogs = await Blogs.getBlogs();\n    // eslint-disable-next-line react/prop-types\n    const params = this.props.match.params;\n    for (const blog of blogs) {\n      // eslint-disable-next-line react/prop-types\n      if (blog.path === `${params.year}/${params.path}`) {\n        blog.text = await (await fetch(blog.url)).text();\n        this.setState({ blog: blog, doRedirect: false });\n        return;\n      }\n    }\n    this.setState({ blog: undefined, doRedirect: true });\n  }\n}\n\nexport default withRouter(Blog);\n","import React, { FunctionComponent } from 'react';\n\nimport '../scss/renderers.scss';\n\ninterface HeadingProps {\n  level: number;\n  children: JSX.Element[];\n}\n\nconst Heading: FunctionComponent<HeadingProps> = (props: HeadingProps) => {\n  // TODO: respect other heading levels too.\n  return <h1 className='md-h1'>{props.children}</h1>;\n};\n\nexport default Heading;\n","import React, { FunctionComponent } from 'react';\n\nimport '../scss/renderers.scss';\n\ninterface CodeProps {\n  value: string;\n  language: string;\n}\n\nconst Code: FunctionComponent<CodeProps> = (props: CodeProps) => {\n  console.log(props);\n  return (\n    // <div>\n    <pre className='md-code'>\n      <code>{props.value}</code>\n    </pre>\n    // </div>\n  );\n};\n\nexport default Code;\n","import React, { Component } from 'react';\nimport { BlogMetadata } from './blog/Blogs';\n\nimport './scss/BlogListEntry.scss';\nimport { Link } from 'react-router-dom';\n\nconst dateOptions: Intl.DateTimeFormatOptions = {\n  weekday: 'long',\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric',\n};\n\nexport default class BlogListEntry extends Component<BlogMetadata, {}> {\n  render(): JSX.Element {\n    return (\n      <div className='BlogListEntry'>\n        <div className='BlogListEntry-content'>\n          <h1 className='BlogListEntry-h1'>\n            <Link to={`/blog/${this.props.path}`}>\n              {this.props.title}\n            </Link>\n          </h1>\n          <div className='BlogListEntry-date'>\n            <span role='img' aria-label='date'>📅</span>&nbsp;\n            {this.props.date.toLocaleDateString('en-US', dateOptions)}\n          </div>\n          <div className='BlogListEntry-tag-container'>\n            {this.props.tags.map((tag, index) => <div className='BlogListEntry-tag' key={index}>{tag}</div>)}\n          </div>\n          <p>\n            {this.props.description}\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Footer from './Footer';\nimport Blogs, { BlogMetadata } from './blog/Blogs';\nimport BlogListEntry from './BlogListEntry';\n\nimport './scss/BlogList.scss';\nimport Header from './Header';\n\ninterface BlogListState {\n  blogs: BlogMetadata[];\n}\n\nexport default class BlogList extends Component<{}, BlogListState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = { blogs: [] };\n  }\n\n  componentDidMount(): void {\n    Blogs.getBlogs().then(blogs => {\n      this.setState({\n        blogs: blogs,\n      });\n    });\n  };\n\n  render(): JSX.Element {\n    return (\n      <div className='BlogList'>\n        <Header/>\n        <div className='BlogList-content'>\n          {this.state.blogs.map((blog, index) => <BlogListEntry {...blog} key={index}/>)}\n        </div>\n        <div className='BlogList-footer'>\n          <Footer/>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { FunctionComponent } from 'react';\n\nconst aboutMe: FunctionComponent<{}> = () => {\n  return (\n    <div style={{ width: '100%', textAlign: 'center', display: 'flex', flexDirection: 'column', justifyContent: 'center', height: '100%' }}>\n      <span role='img' aria-label='under construction' style={{ fontSize: '8rem', textAlign: 'center', width: '100%' }}>\n        🚧\n      </span>\n      <p style={{ fontSize: '6rem', color: 'white' }}>\n        This page is under construction\n      </p>\n    </div>\n  );\n};\n\nexport default aboutMe;\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport Home from './Home';\nimport Blog from './Blog';\nimport BlogList from './BlogList';\nimport Header from './Header';\nimport AboutMe from './AboutMe';\n\nclass App extends Component<{}, {}> {\n  render(): JSX.Element {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path='/'>\n            <Home />\n          </Route>\n          <Route exact path='/blog'>\n            <BlogList/>\n          </Route>\n          <Route exact path='/blog/:year/:path'>\n            <Blog/>\n          </Route>\n          <Route exact path='/about'>\n            <AboutMe/>\n          </Route>\n          <Route exact path='/404'>\n            <Header/>\n            <h1 style={{ color: '#fff', textAlign: 'center', fontWeight: 100, fontSize: '4rem' }}>\n              404<br/>Page not found</h1>\n          </Route>\n          <Route path='*'>\n            <Redirect to='/404'/>\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","var map = {\n\t\"./2020/hello-world.md\": [\n\t\t147,\n\t\t3\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 63;\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}